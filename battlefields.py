# -*- coding: utf-8 -*-
"""battleFields.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BZpEzFVrs8fjfuSjea9KThZF2gxgk0CO
"""

from pyspark.sql import SparkSession
from pyspark.sql.functions import when,col
from pyspark.sql.window import Window
from pyspark.sql.functions import row_number,dense_rank,rank
from pyspark.sql.functions import col,sum,avg,max

spark = SparkSession.builder.appName('King').getOrCreate()

king_data = [
    (1, 'Robb Stark', 'House Stark'),
    (2, 'Joffrey Baratheon', 'House Lannister'),
    (3, 'Stannis Baratheon', 'House Baratheon'),
    (4, 'Balon Greyjoy', 'House Greyjoy'),
    (5, 'Mace Tyrell', 'House Tyrell'),
    (6, 'Doran Martell', 'House Martell')
]

battle_data = [
    (1, 'Battle of Oxcross', 1, 2, 1, 'The North'),
    (2, 'Battle of Blackwater', 3, 4, 0, 'The North'),
    (3, 'Battle of the Fords', 1, 5, 1, 'The Reach'),
    (4, 'Battle of the Green Fork', 2, 6, 0, 'The Reach'),
    (5, 'Battle of the Ruby Ford', 1, 3, 1, 'The Riverlands'),
    (6, 'Battle of the Golden Tooth', 2, 1, 0, 'The North'),
    (7, 'Battle of Riverrun', 3, 4, 1, 'The Riverlands'),
    (8, 'Battle of Riverrun', 1, 3, 0, 'The Riverlands')
]


king_schema = "k_no int , king string , house string"

battle_schema = "battle_number int , name string ,attacker_king int , defender_king int , attacker_outcome int , region string"

king_df = spark.createDataFrame(data = king_data ,schema = king_schema)



battle_df = spark.createDataFrame(data = battle_data ,schema = battle_schema)

bt_df=battle_df.withColumn(
                        "winner_king",
                          when(col("attacker_outcome")==1,col("attacker_king"))
                          .when(col("attacker_outcome")==0,col("defender_king"))
                          .otherwise(0)
)

bt_df.show()
king_df.show()

joined_df=bt_df.join(king_df,bt_df.winner_king==king_df.k_no,"inner")

joined_df.show()

#select the maximum winner in each region

joined_df=joined_df.groupBy("region","house").count()
joined_df.show()
windowspc=Window.partitionBy("region").orderBy(col("count").desc())
joined_df_final=joined_df.select("*",dense_rank().over(windowspc).alias("Drank")).filter(col("Drank")==1).drop("Drank")
joined_df_final.show()